// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zde37/Jusgo/internal/service (interfaces: ServiceProvider)
//
// Generated by this command:
//
//	mockgen -package mockproviders -destination internal/mock/service.go github.com/zde37/Jusgo/internal/service ServiceProvider
//

// Package mockproviders is a generated GoMock package.
package mockproviders

import (
	context "context"
	reflect "reflect"

	models "github.com/zde37/Jusgo/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceProvider is a mock of ServiceProvider interface.
type MockServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderMockRecorder
}

// MockServiceProviderMockRecorder is the mock recorder for MockServiceProvider.
type MockServiceProviderMockRecorder struct {
	mock *MockServiceProvider
}

// NewMockServiceProvider creates a new mock instance.
func NewMockServiceProvider(ctrl *gomock.Controller) *MockServiceProvider {
	mock := &MockServiceProvider{ctrl: ctrl}
	mock.recorder = &MockServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceProvider) EXPECT() *MockServiceProviderMockRecorder {
	return m.recorder
}

// CreateJoke mocks base method.
func (m *MockServiceProvider) CreateJoke(arg0 context.Context, arg1 models.Jusgo) (models.Jusgo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJoke", arg0, arg1)
	ret0, _ := ret[0].(models.Jusgo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJoke indicates an expected call of CreateJoke.
func (mr *MockServiceProviderMockRecorder) CreateJoke(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoke", reflect.TypeOf((*MockServiceProvider)(nil).CreateJoke), arg0, arg1)
}

// DeleteJoke mocks base method.
func (m *MockServiceProvider) DeleteJoke(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJoke indicates an expected call of DeleteJoke.
func (mr *MockServiceProviderMockRecorder) DeleteJoke(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJoke", reflect.TypeOf((*MockServiceProvider)(nil).DeleteJoke), arg0, arg1)
}

// GetAllJokes mocks base method.
func (m *MockServiceProvider) GetAllJokes(arg0 context.Context, arg1, arg2 int) ([]models.Jusgo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJokes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Jusgo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJokes indicates an expected call of GetAllJokes.
func (mr *MockServiceProviderMockRecorder) GetAllJokes(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJokes", reflect.TypeOf((*MockServiceProvider)(nil).GetAllJokes), arg0, arg1, arg2)
}

// GetJoke mocks base method.
func (m *MockServiceProvider) GetJoke(arg0 context.Context, arg1 string) (models.Jusgo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJoke", arg0, arg1)
	ret0, _ := ret[0].(models.Jusgo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJoke indicates an expected call of GetJoke.
func (mr *MockServiceProviderMockRecorder) GetJoke(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJoke", reflect.TypeOf((*MockServiceProvider)(nil).GetJoke), arg0, arg1)
}

// UpdateJoke mocks base method.
func (m *MockServiceProvider) UpdateJoke(arg0 context.Context, arg1 string, arg2 models.Jusgo) (models.Jusgo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJoke", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Jusgo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJoke indicates an expected call of UpdateJoke.
func (mr *MockServiceProviderMockRecorder) UpdateJoke(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJoke", reflect.TypeOf((*MockServiceProvider)(nil).UpdateJoke), arg0, arg1, arg2)
}
